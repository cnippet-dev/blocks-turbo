// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model User {
  id                   String          @id @default(cuid()) @map("_id")
  name                 String?
  username             String?         @unique
  email                String?         @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  pro                  Boolean         @default(false)
  provider             String? // Main provider (credentials, google, github)
  termsAccepted        Boolean         @default(false)
  preferredTheme       String?         @default("system")
  emailNotifications   Boolean?        @default(true)
  inAppNotifications   Boolean?        @default(false)
  preferredLanguage    String?         @default("en")
  preferredTimezone    String?         @default("UTC")
  country              String?
  ResetToken           ResetToken[]
  favourites           String[]
  // Account deletion fields
  deletionRequestedAt  DateTime?
  deletionScheduledAt  DateTime?
  deletedAt            DateTime?
  deletionToken        String?         @unique
  deletionTokenExpires DateTime?
  deletionReason       String?
  // Linked accounts
  linkedAccounts       LinkedAccount[]
  Subscription         Subscription[]
  Payment              Payment[]
}

model LinkedAccount {
  id                String @id @default(cuid()) @map("_id")
  userId            String
  provider          String // google, github
  providerAccountId String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@unique([userId, provider])
}

model Subscription {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  plan      String
  status    String
  startDate DateTime @default(now())
  endDate   DateTime
  paymentId String   @unique
  payment   Payment  @relation(fields: [paymentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  razorpayOrderId   String?
  razorpayPaymentId String?
}

model Payment {
  id                String        @id @default(cuid()) @map("_id")
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  amount            Float
  currency          String
  receiptId         String?
  status            String
  razorpayOrderId   String        @unique
  razorpayPaymentId String?
  method            String?
  description       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  subscription      Subscription?
}

model Newsletter {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetToken {
  id        String   @id @default(cuid()) @map("_id")
  token     String   @unique
  expires   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Otp {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
